<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
enum tower
{
    automatic,
    sniper,
    flame,
    ice,
    electric,
    cannon
}

type = tower.automatic;
u_left  = 0; //Left Upgrade Tree
u_right = 0; //Right Upgrade Tree

owner = 0;
target = noone;
range = 32*4;

enum stat
{
    damage,
    rof,
    range,
    camo,
    projectile,
    velocity,
    bounce,
    fire_chance,
    freeze_chance,
    slow_chance,
    electric,
    collat
}

damage          = get_stat(type,stat.damage);
rof             = get_stat(type,stat.rof);
range           = get_stat(type,stat.range);
camo            = get_stat(type,stat.camo);
projectile      = get_stat(type,stat.projectile);
velocity        = get_stat(type,stat.velocity);
bounce          = get_stat(type,stat.bounce);
fire_chance     = get_stat(type,stat.fire_chance);
freeze_chance   = get_stat(type,stat.freeze_chance);
slow_chance     = get_stat(type,stat.slow_chance);
electric        = get_stat(type,stat.electric);
collat          = get_stat(type,stat.collat);

can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target
target = noone;
var pri = ds_priority_create();
with(obj_enemy)
{
    if owner == other.owner and point_distance(other.x,other.y,x,y) &lt;= other.range
    {
        ds_priority_add(pri,id,path_position);
    }
}
if ds_priority_size(pri) &gt; 0 target = ds_priority_find_max(pri);
ds_priority_destroy(pri);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
if instance_exists(target)
{
    image_angle = point_direction(x,y,target.x,target.y);
    if can_shoot
    {
        can_shoot = false;
        alarm[0] = 60/rof;
        if projectile != noone
        {
            var p = instance_create(x,y,projectile);
            p.speed = velocity;
            p.owner = id;
            p.alarm[0] = range/velocity;
            p.damage = damage;
            p.direction = image_angle;
            p.hp = collat;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_turret(x,y,type,u_left,u_right,image_angle);

draw_setup(c_white,1);
draw_circle(x,y,range,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
