<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>port    = 6510;
ip      = "127.0.0.1";
tcp_sock = network_create_socket(network_socket_tcp);
//udp_sock = network_create_socket_ext(network_socket_udp,6511);

buff        = buffer_create(1024,buffer_grow,1);
connect     = false;
connected   = false;
failed      = false;
attempts    = 0;

client = -1;

login           = -1;
register        = -1;
logged          = false;
display_name    = "Player";

step = 0;

server_down_reason = "Failed to connect to the main server.";
file    = http_get_file("http://textuploader.com/ds6ad/raw","connect.dat");
reason  = http_get_file("http://textuploader.com/ds60u/raw","reason.dat");

network_set_config(network_config_connect_timeout, 4000);
network_set_config(network_config_use_non_blocking_socket, true);



enum gamemode
{
    assault,
    defense,
    team
}

enum command
{
    login,
    register,
    connect
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect
if connect and !connected
{
    connect = false;
    client = network_connect(tcp_sock,ip,port);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = async_load[? "id"];
if eventid == client
{
    if async_load[? "type"] == network_type_non_blocking_connect
    {
        if async_load[? "succeeded"]
        {
            connected = true;
            step = 2;
        }
        else
        {
            failed = true;
            /*if attempts &gt;= 3 failed = true;
            else
            {
                attempts++;
                connect = true;
            }*/
        }
    }
    else client_handle();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if async_load[? "id"] == login
{
    buffer_seek(buff,buffer_seek_start,0);
    buffer_write(buff,buffer_u16,command.login);
    buffer_write(buff,buffer_string,async_load[? "username"]);
    buffer_write(buff,buffer_string,sha1_string_unicode(async_load[? "password"]+string(game_id)));
    
    network_send_packet(tcp_sock,buff,buffer_tell(buff));
}
else if async_load[? "id"] == register
{
    buffer_seek(buff,buffer_seek_start,0);
    buffer_write(buff,buffer_u16,command.register);
    buffer_write(buff,buffer_string,async_load[? "username"]);
    buffer_write(buff,buffer_string,sha1_string_unicode(async_load[? "password"]+string(game_id)));
    network_send_packet(tcp_sock,buff,buffer_tell(buff));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect Address
if async_load[? "id"] == file
{
    if file_exists(string(async_load[? "result"]))
    {
        var f = file_text_open_read(async_load[? "result"]);
        var str = file_text_read_string(f);
        file_text_close(f);
        ip = string_copy(str,1,string_pos(":",str)-1);
        port = real(string_delete(str,1,string_pos(":",str)));
        connect = true;
        step = 1;
    }
}

else if async_load[? "id"] == reason
{
    if file_exists(string(async_load[? "result"]))
    {
        var f = file_text_open_read(async_load[? "result"]);
        var str = file_text_read_string(f);
        file_text_close(f);
        server_down_reason = str;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if connected draw_text(8,8,"Connected");
draw_setup(c_white,1,fa_left,fa_top,ft_info);
if logged draw_text(8,8,"Logged in as "+display_name);

var w = display_get_gui_width(), h = display_get_gui_height();
if failed
{
    draw_setup(c_black,0.7,fa_middle,fa_center,ft_info);
    draw_rectangle(0,0,w,h,false);
    
    draw_set_color(c_white);
    draw_text_outline(w/2,h/2,server_down_reason,c_black);
}
else if !connected
{
    draw_setup(c_black,0.7,fa_middle,fa_center,ft_info);
    draw_rectangle(0,0,w,h,false);
    
    draw_setup(c_white,1,fa_middle,fa_top);
    var count = 8 i = 0;
    repeat(count)
    {
        var xx = w/2, yy = h/2;
        draw_set_alpha(i/count);
        var a = current_time/2;
        a += i*(360/count);
        draw_line_width(xx+lengthdir_x(6,a),yy+lengthdir_y(6,a),xx+lengthdir_x(18,a),yy+lengthdir_y(18,a),3);
        i++;
    }
    if step == 0 draw_text_outline(w/2,h/2+20,"Requesting server info...",c_black);
    else if step == 1 draw_text_outline(w/2,h/2+20,"Connecting to main server...",c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if connected and !logged
{
    register = get_login_async("","");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if connected and !logged
{
    login = get_login_async("","");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
